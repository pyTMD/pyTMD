# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python on pull request

on:
  pull_request:

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest]
        python-version: [3.7, 3.8]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies for Linux
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install gdal-bin libgdal-dev libproj-dev proj-data proj-bin \
            libgeos-dev libhdf5-dev libnetcdf-dev octave
        export CPLUS_INCLUDE_PATH=/usr/include/gdal
        export C_INCLUDE_PATH=/usr/include/gdal
        pip install --upgrade pip
        pip install numpy
        pip install zarr
        pip install pandas
        pip install --no-deps git+https://github.com/tsutterley/read-ICESat-2.git
        pip install --no-deps git+https://github.com/tsutterley/read-ATM1b-QFIT-binary.git
        pip install .
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    - name: Install dependencies for MacOS
      if: matrix.os == 'macos-latest'
      run: |
        brew install proj
        brew install geos
        brew install gdal
        brew install hdf5
        brew install netcdf
        brew install octave
        pip install --upgrade pip
        pip install numpy
        pip install zarr
        pip install pandas
        pip install --no-deps git+https://github.com/tsutterley/read-ICESat-2.git
        pip install --no-deps git+https://github.com/tsutterley/read-ATM1b-QFIT-binary.git
        pip install .
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Checkout Matlab TMD Toolbox
      uses: actions/checkout@v2
      with:
        repository: tsutterley/TMD_Matlab_Toolbox_v2.5
        path: TMD_Matlab_Toolbox
        ref: inferminor
    - name: Test with pytest
      run: |
        pytest --verbose --capture=no --cov=./ --cov-report=xml \
            --username=${{ secrets.EARTHDATA_USERNAME }} \
            --password=${{ secrets.EARTHDATA_PASSWORD }} \
            --aws-access=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --aws-secret=${{ secrets.AWS_SECRET_KEY }} \
            --aws-region=${{ secrets.AWS_REGION_NAME }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
    - name: Archive code coverage results
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage-report
        path: ./coverage.xml
